using domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace api.database;

public class MealMateContext : DbContext
{

    public MealMateContext(DbContextOptions<MealMateContext> contextOptions) : base(contextOptions){}
    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        base.OnModelCreating(modelBuilder);
        
        // PostgreSQL can't handle the GUIDs. Therefore we have to add a conversion
        var guidToStringConverter = new GuidToStringConverter();
        modelBuilder.Entity<Category>().Property(_ => _.Id).HasConversion(guidToStringConverter);
        modelBuilder.Entity<Item>().Property(_ => _.Id).HasConversion(guidToStringConverter);
        modelBuilder.Entity<ShoppingList>().Property(_ => _.Id).HasConversion(guidToStringConverter);
        modelBuilder.Entity<Entry>().Property(_ => _.Id).HasConversion(guidToStringConverter);
        
        // the entity id is generated by the domain code
        modelBuilder.Entity<Entry>().Property(_ => _.Id).ValueGeneratedNever();
        modelBuilder.Entity<Item>().Property(_ => _.Id).ValueGeneratedNever();
    }

    public DbSet<Item> Items { get; init; }
    public DbSet<Category> Categories { get; init; }
    public DbSet<ShoppingList> ShoppingLists { get; init; }
    
    public DbSet<Entry> Entries { get; init; }

    public async Task<Item> CreateItem(string itemName, Guid categoryId)
    {
        var category = await Categories.FindAsync(categoryId);
        
        // Todo: Use result object
        if (category is null)
            return null;

        var item = Item.Create(itemName);
        item.SetCategory(category);
        category.AddItem(item);
        await Items.AddAsync(item);
        await SaveChangesAsync();
        
        return item;
    }
    
    public async Task DeleteItemAsync(Guid itemId)
    {
        var item = await Items.FindAsync(itemId);

        if (item is null) return;

        var entryWithReferenceToItemExists = await Entries.AnyAsync(_ => _.Item.Id.Equals(itemId));
        
        if (entryWithReferenceToItemExists) return;

        // Todo: remove the item from objects?
        Remove(item);
        await SaveChangesAsync();
        
    }

    public async Task CreateEntryAsync(Guid itemId, Guid shoppingListId, string qualifier)
    {
        var item = await Items.FindAsync(itemId);
        var shoppingList = await ShoppingLists.FindAsync(shoppingListId);
        
        // Todo: Use result object
        if (item is null || shoppingList is null)
            return;

        //var entry = domain.Entry.Create(item, shoppingList, qualifier);
        shoppingList.CreateEntry(item, qualifier);
        // update the shopping list aggregate
        ShoppingLists.Update(shoppingList);
        
        // todo: check change tracker
        

        await SaveChangesAsync();
    }
}